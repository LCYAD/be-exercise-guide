//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Score = newScoreTable("public", "score", "")

type scoreTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Value        postgres.ColumnInteger
	TeacherID    postgres.ColumnInteger
	SubmissionID postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp
	DeletedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScoreTable struct {
	scoreTable

	EXCLUDED scoreTable
}

// AS creates new ScoreTable with assigned alias
func (a ScoreTable) AS(alias string) *ScoreTable {
	return newScoreTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScoreTable with assigned schema name
func (a ScoreTable) FromSchema(schemaName string) *ScoreTable {
	return newScoreTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScoreTable with assigned table prefix
func (a ScoreTable) WithPrefix(prefix string) *ScoreTable {
	return newScoreTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScoreTable with assigned table suffix
func (a ScoreTable) WithSuffix(suffix string) *ScoreTable {
	return newScoreTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScoreTable(schemaName, tableName, alias string) *ScoreTable {
	return &ScoreTable{
		scoreTable: newScoreTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newScoreTableImpl("", "excluded", ""),
	}
}

func newScoreTableImpl(schemaName, tableName, alias string) scoreTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		ValueColumn        = postgres.IntegerColumn("value")
		TeacherIDColumn    = postgres.IntegerColumn("teacher_id")
		SubmissionIDColumn = postgres.IntegerColumn("submission_id")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampColumn("deleted_at")
		allColumns         = postgres.ColumnList{IDColumn, ValueColumn, TeacherIDColumn, SubmissionIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns     = postgres.ColumnList{ValueColumn, TeacherIDColumn, SubmissionIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return scoreTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Value:        ValueColumn,
		TeacherID:    TeacherIDColumn,
		SubmissionID: SubmissionIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
