//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Exam = newExamTable("public", "exam", "")

type examTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	Name       postgres.ColumnString
	Type       postgres.ColumnInteger
	StartedAt  postgres.ColumnTimestamp
	FinishedAt postgres.ColumnTimestamp
	CourseID   postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExamTable struct {
	examTable

	EXCLUDED examTable
}

// AS creates new ExamTable with assigned alias
func (a ExamTable) AS(alias string) *ExamTable {
	return newExamTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExamTable with assigned schema name
func (a ExamTable) FromSchema(schemaName string) *ExamTable {
	return newExamTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExamTable with assigned table prefix
func (a ExamTable) WithPrefix(prefix string) *ExamTable {
	return newExamTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExamTable with assigned table suffix
func (a ExamTable) WithSuffix(suffix string) *ExamTable {
	return newExamTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExamTable(schemaName, tableName, alias string) *ExamTable {
	return &ExamTable{
		examTable: newExamTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newExamTableImpl("", "excluded", ""),
	}
}

func newExamTableImpl(schemaName, tableName, alias string) examTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		NameColumn       = postgres.StringColumn("name")
		TypeColumn       = postgres.IntegerColumn("type")
		StartedAtColumn  = postgres.TimestampColumn("started_at")
		FinishedAtColumn = postgres.TimestampColumn("finished_at")
		CourseIDColumn   = postgres.IntegerColumn("course_id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		allColumns       = postgres.ColumnList{IDColumn, NameColumn, TypeColumn, StartedAtColumn, FinishedAtColumn, CourseIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns   = postgres.ColumnList{NameColumn, TypeColumn, StartedAtColumn, FinishedAtColumn, CourseIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return examTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Name:       NameColumn,
		Type:       TypeColumn,
		StartedAt:  StartedAtColumn,
		FinishedAt: FinishedAtColumn,
		CourseID:   CourseIDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
