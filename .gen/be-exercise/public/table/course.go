//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Course = newCourseTable("public", "course", "")

type courseTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	Description  postgres.ColumnString
	DepartmentID postgres.ColumnInteger
	TeacherID    postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp
	DeletedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CourseTable struct {
	courseTable

	EXCLUDED courseTable
}

// AS creates new CourseTable with assigned alias
func (a CourseTable) AS(alias string) *CourseTable {
	return newCourseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CourseTable with assigned schema name
func (a CourseTable) FromSchema(schemaName string) *CourseTable {
	return newCourseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CourseTable with assigned table prefix
func (a CourseTable) WithPrefix(prefix string) *CourseTable {
	return newCourseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CourseTable with assigned table suffix
func (a CourseTable) WithSuffix(suffix string) *CourseTable {
	return newCourseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCourseTable(schemaName, tableName, alias string) *CourseTable {
	return &CourseTable{
		courseTable: newCourseTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newCourseTableImpl("", "excluded", ""),
	}
}

func newCourseTableImpl(schemaName, tableName, alias string) courseTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		DescriptionColumn  = postgres.StringColumn("description")
		DepartmentIDColumn = postgres.IntegerColumn("department_id")
		TeacherIDColumn    = postgres.IntegerColumn("teacher_id")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampColumn("deleted_at")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, DepartmentIDColumn, TeacherIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, DescriptionColumn, DepartmentIDColumn, TeacherIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return courseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Description:  DescriptionColumn,
		DepartmentID: DepartmentIDColumn,
		TeacherID:    TeacherIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
