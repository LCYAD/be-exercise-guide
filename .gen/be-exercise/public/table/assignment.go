//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Assignment = newAssignmentTable("public", "assignment", "")

type assignmentTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Type        postgres.ColumnInteger
	DueDate     postgres.ColumnDate
	CourseID    postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp
	DeletedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AssignmentTable struct {
	assignmentTable

	EXCLUDED assignmentTable
}

// AS creates new AssignmentTable with assigned alias
func (a AssignmentTable) AS(alias string) *AssignmentTable {
	return newAssignmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AssignmentTable with assigned schema name
func (a AssignmentTable) FromSchema(schemaName string) *AssignmentTable {
	return newAssignmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AssignmentTable with assigned table prefix
func (a AssignmentTable) WithPrefix(prefix string) *AssignmentTable {
	return newAssignmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AssignmentTable with assigned table suffix
func (a AssignmentTable) WithSuffix(suffix string) *AssignmentTable {
	return newAssignmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAssignmentTable(schemaName, tableName, alias string) *AssignmentTable {
	return &AssignmentTable{
		assignmentTable: newAssignmentTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newAssignmentTableImpl("", "excluded", ""),
	}
}

func newAssignmentTableImpl(schemaName, tableName, alias string) assignmentTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		TypeColumn        = postgres.IntegerColumn("type")
		DueDateColumn     = postgres.DateColumn("due_date")
		CourseIDColumn    = postgres.IntegerColumn("course_id")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		DeletedAtColumn   = postgres.TimestampColumn("deleted_at")
		allColumns        = postgres.ColumnList{IDColumn, TitleColumn, DescriptionColumn, TypeColumn, DueDateColumn, CourseIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns    = postgres.ColumnList{TitleColumn, DescriptionColumn, TypeColumn, DueDateColumn, CourseIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return assignmentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Type:        TypeColumn,
		DueDate:     DueDateColumn,
		CourseID:    CourseIDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
