//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Enrollment = newEnrollmentTable("public", "enrollment", "")

type enrollmentTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	StudentID postgres.ColumnInteger
	CourseID  postgres.ColumnInteger
	Approved  postgres.ColumnBool
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp
	DeletedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EnrollmentTable struct {
	enrollmentTable

	EXCLUDED enrollmentTable
}

// AS creates new EnrollmentTable with assigned alias
func (a EnrollmentTable) AS(alias string) *EnrollmentTable {
	return newEnrollmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EnrollmentTable with assigned schema name
func (a EnrollmentTable) FromSchema(schemaName string) *EnrollmentTable {
	return newEnrollmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EnrollmentTable with assigned table prefix
func (a EnrollmentTable) WithPrefix(prefix string) *EnrollmentTable {
	return newEnrollmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EnrollmentTable with assigned table suffix
func (a EnrollmentTable) WithSuffix(suffix string) *EnrollmentTable {
	return newEnrollmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEnrollmentTable(schemaName, tableName, alias string) *EnrollmentTable {
	return &EnrollmentTable{
		enrollmentTable: newEnrollmentTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newEnrollmentTableImpl("", "excluded", ""),
	}
}

func newEnrollmentTableImpl(schemaName, tableName, alias string) enrollmentTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		StudentIDColumn = postgres.IntegerColumn("student_id")
		CourseIDColumn  = postgres.IntegerColumn("course_id")
		ApprovedColumn  = postgres.BoolColumn("approved")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		DeletedAtColumn = postgres.TimestampColumn("deleted_at")
		allColumns      = postgres.ColumnList{IDColumn, StudentIDColumn, CourseIDColumn, ApprovedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns  = postgres.ColumnList{StudentIDColumn, CourseIDColumn, ApprovedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return enrollmentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		StudentID: StudentIDColumn,
		CourseID:  CourseIDColumn,
		Approved:  ApprovedColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
