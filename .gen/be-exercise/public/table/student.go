//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Student = newStudentTable("public", "student", "")

type studentTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	FirstName    postgres.ColumnString
	LastName     postgres.ColumnString
	Email        postgres.ColumnString
	Dob          postgres.ColumnDate
	DepartmentID postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp
	DeletedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentTable struct {
	studentTable

	EXCLUDED studentTable
}

// AS creates new StudentTable with assigned alias
func (a StudentTable) AS(alias string) *StudentTable {
	return newStudentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentTable with assigned schema name
func (a StudentTable) FromSchema(schemaName string) *StudentTable {
	return newStudentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentTable with assigned table prefix
func (a StudentTable) WithPrefix(prefix string) *StudentTable {
	return newStudentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentTable with assigned table suffix
func (a StudentTable) WithSuffix(suffix string) *StudentTable {
	return newStudentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentTable(schemaName, tableName, alias string) *StudentTable {
	return &StudentTable{
		studentTable: newStudentTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newStudentTableImpl("", "excluded", ""),
	}
}

func newStudentTableImpl(schemaName, tableName, alias string) studentTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		FirstNameColumn    = postgres.StringColumn("first_name")
		LastNameColumn     = postgres.StringColumn("last_name")
		EmailColumn        = postgres.StringColumn("email")
		DobColumn          = postgres.DateColumn("dob")
		DepartmentIDColumn = postgres.IntegerColumn("department_id")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampColumn("deleted_at")
		allColumns         = postgres.ColumnList{IDColumn, FirstNameColumn, LastNameColumn, EmailColumn, DobColumn, DepartmentIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns     = postgres.ColumnList{FirstNameColumn, LastNameColumn, EmailColumn, DobColumn, DepartmentIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return studentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		FirstName:    FirstNameColumn,
		LastName:     LastNameColumn,
		Email:        EmailColumn,
		Dob:          DobColumn,
		DepartmentID: DepartmentIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
