//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Grade = newGradeTable("public", "grade", "")

type gradeTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	EnrollmentID postgres.ColumnInteger
	Value        postgres.ColumnInteger
	Passed       postgres.ColumnBool
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp
	DeletedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GradeTable struct {
	gradeTable

	EXCLUDED gradeTable
}

// AS creates new GradeTable with assigned alias
func (a GradeTable) AS(alias string) *GradeTable {
	return newGradeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GradeTable with assigned schema name
func (a GradeTable) FromSchema(schemaName string) *GradeTable {
	return newGradeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GradeTable with assigned table prefix
func (a GradeTable) WithPrefix(prefix string) *GradeTable {
	return newGradeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GradeTable with assigned table suffix
func (a GradeTable) WithSuffix(suffix string) *GradeTable {
	return newGradeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGradeTable(schemaName, tableName, alias string) *GradeTable {
	return &GradeTable{
		gradeTable: newGradeTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newGradeTableImpl("", "excluded", ""),
	}
}

func newGradeTableImpl(schemaName, tableName, alias string) gradeTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		EnrollmentIDColumn = postgres.IntegerColumn("enrollment_id")
		ValueColumn        = postgres.IntegerColumn("value")
		PassedColumn       = postgres.BoolColumn("passed")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampColumn("deleted_at")
		allColumns         = postgres.ColumnList{IDColumn, EnrollmentIDColumn, ValueColumn, PassedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns     = postgres.ColumnList{EnrollmentIDColumn, ValueColumn, PassedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return gradeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EnrollmentID: EnrollmentIDColumn,
		Value:        ValueColumn,
		Passed:       PassedColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
