//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Submission = newSubmissionTable("public", "submission", "")

type submissionTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	StudentID    postgres.ColumnInteger
	AssignmentID postgres.ColumnInteger
	ExamID       postgres.ColumnInteger
	SubmittedAt  postgres.ColumnTimestamp
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp
	DeletedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubmissionTable struct {
	submissionTable

	EXCLUDED submissionTable
}

// AS creates new SubmissionTable with assigned alias
func (a SubmissionTable) AS(alias string) *SubmissionTable {
	return newSubmissionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubmissionTable with assigned schema name
func (a SubmissionTable) FromSchema(schemaName string) *SubmissionTable {
	return newSubmissionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubmissionTable with assigned table prefix
func (a SubmissionTable) WithPrefix(prefix string) *SubmissionTable {
	return newSubmissionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubmissionTable with assigned table suffix
func (a SubmissionTable) WithSuffix(suffix string) *SubmissionTable {
	return newSubmissionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubmissionTable(schemaName, tableName, alias string) *SubmissionTable {
	return &SubmissionTable{
		submissionTable: newSubmissionTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newSubmissionTableImpl("", "excluded", ""),
	}
}

func newSubmissionTableImpl(schemaName, tableName, alias string) submissionTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		StudentIDColumn    = postgres.IntegerColumn("student_id")
		AssignmentIDColumn = postgres.IntegerColumn("assignment_id")
		ExamIDColumn       = postgres.IntegerColumn("exam_id")
		SubmittedAtColumn  = postgres.TimestampColumn("submitted_at")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampColumn("deleted_at")
		allColumns         = postgres.ColumnList{IDColumn, StudentIDColumn, AssignmentIDColumn, ExamIDColumn, SubmittedAtColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns     = postgres.ColumnList{StudentIDColumn, AssignmentIDColumn, ExamIDColumn, SubmittedAtColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return submissionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		StudentID:    StudentIDColumn,
		AssignmentID: AssignmentIDColumn,
		ExamID:       ExamIDColumn,
		SubmittedAt:  SubmittedAtColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
